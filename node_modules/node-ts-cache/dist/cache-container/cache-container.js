"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheContainer = void 0;
var debug_1 = require("debug");
var debug = (0, debug_1.default)("node-ts-cache");
var DEFAULT_TTL_SECONDS = 60;
var CacheContainer = /** @class */ (function () {
    function CacheContainer(storage) {
        this.storage = storage;
    }
    CacheContainer.prototype.getItem = function (key) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var item;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.storage.getItem(key)];
                    case 1:
                        item = _b.sent();
                        if (!(((_a = item === null || item === void 0 ? void 0 : item.meta) === null || _a === void 0 ? void 0 : _a.ttl) && this.isItemExpired(item))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.unsetKey(key)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/, item ? item.content : undefined];
                }
            });
        });
    };
    CacheContainer.prototype.setItem = function (key, content, options) {
        return __awaiter(this, void 0, void 0, function () {
            var finalOptions, meta, ttlMilliseconds;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        finalOptions = __assign({ ttl: DEFAULT_TTL_SECONDS, isLazy: true, isCachedForever: false }, options);
                        meta = {};
                        if (!finalOptions.isCachedForever) {
                            ttlMilliseconds = finalOptions.ttl * 1000;
                            meta = {
                                ttl: ttlMilliseconds,
                                createdAt: Date.now()
                            };
                            if (!finalOptions.isLazy) {
                                setTimeout(function () {
                                    _this.unsetKey(key);
                                    debug("Expired key " + key + " removed from cache");
                                }, ttlMilliseconds);
                            }
                        }
                        return [4 /*yield*/, this.storage.setItem(key, { meta: meta, content: content })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CacheContainer.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.clear()];
                    case 1:
                        _a.sent();
                        debug("Cleared cache");
                        return [2 /*return*/];
                }
            });
        });
    };
    CacheContainer.prototype.isItemExpired = function (item) {
        return Date.now() > item.meta.createdAt + item.meta.ttl;
    };
    CacheContainer.prototype.unsetKey = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.setItem(key, undefined)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return CacheContainer;
}());
exports.CacheContainer = CacheContainer;
