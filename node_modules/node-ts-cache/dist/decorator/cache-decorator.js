"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
var debug_1 = require("debug");
var debug = (0, debug_1.default)("node-ts-cache");
var jsonCalculateKey = function (data) {
    return data.className + ":" + data.methodName + ":" + JSON.stringify(data.args);
};
function Cache(container, options) {
    return function (target, methodName, descriptor) {
        var originalMethod = descriptor.value;
        var className = target.constructor.name;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var keyOptions, cacheKey, runOriginalMethod;
                var _this = this;
                return __generator(this, function (_a) {
                    options !== null && options !== void 0 ? options : (options = {});
                    keyOptions = {
                        args: args,
                        methodName: methodName,
                        className: className
                    };
                    cacheKey = options.calculateKey
                        ? options.calculateKey(keyOptions)
                        : jsonCalculateKey(keyOptions);
                    runOriginalMethod = function () { return __awaiter(_this, void 0, void 0, function () {
                        var methodCall, isAsync;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    methodCall = originalMethod.apply(this, args);
                                    isAsync = ((_a = methodCall === null || methodCall === void 0 ? void 0 : methodCall.constructor) === null || _a === void 0 ? void 0 : _a.name) === "AsyncFunction" ||
                                        ((_b = methodCall === null || methodCall === void 0 ? void 0 : methodCall.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Promise";
                                    if (!isAsync) return [3 /*break*/, 2];
                                    return [4 /*yield*/, methodCall];
                                case 1: return [2 /*return*/, _c.sent()];
                                case 2: return [2 /*return*/, methodCall];
                            }
                        });
                    }); };
                    if (!target.__node_ts_cache_method_run_queue) {
                        target.__node_ts_cache_method_run_queue = {};
                    }
                    if (target.__node_ts_cache_method_run_queue[cacheKey]) {
                        debug("Method is already enqueued " + cacheKey);
                        return [2 /*return*/, target.__node_ts_cache_method_run_queue[cacheKey]];
                    }
                    target.__node_ts_cache_method_run_queue[cacheKey] = (function () { return __awaiter(_this, void 0, void 0, function () {
                        var entry, methodResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, , 4, 5]);
                                    return [4 /*yield*/, container.getItem(cacheKey)];
                                case 1:
                                    entry = _a.sent();
                                    if (entry) {
                                        debug("Cache HIT " + cacheKey);
                                        return [2 /*return*/, entry];
                                    }
                                    debug("Cache MISS " + cacheKey);
                                    return [4 /*yield*/, runOriginalMethod()];
                                case 2:
                                    methodResult = _a.sent();
                                    return [4 /*yield*/, container.setItem(cacheKey, methodResult, options)];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/, methodResult];
                                case 4:
                                    target.__node_ts_cache_method_run_queue[cacheKey] =
                                        undefined;
                                    return [7 /*endfinally*/];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); })();
                    return [2 /*return*/, target.__node_ts_cache_method_run_queue[cacheKey]];
                });
            });
        };
        debug("Added caching for method " + className + ":" + methodName.toString());
        return descriptor;
    };
}
exports.Cache = Cache;
